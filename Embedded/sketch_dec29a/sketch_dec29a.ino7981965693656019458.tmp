#include "SPI.h"
#include <i2c_t3.h>
#include "ILI9341_t3.h"
#include <XPT2046_Touchscreen.h>
#include "CTFont.h"

#include "dh_logger.h"
#include "dh_controller.h"

#include "ControlledOSStatus.h"
#include "ControlledLED.h"
#include "ControlledCalc.h"
#include "ControlledTouchLCD.h"
#include "ControlledFusion.h"
#include "BNO055Fusion.h"
#include "ControlledVMeter.h"
#include "dh_ax-12a.h"
#include "ControlledPanTilt.h"
#include "ControlledLidar.h"
#include "ControlledI2CXL.h"
#include "dh_qik2s12v10.h"
#include "ControlledMotor.h"
#include "ControlledSpek9645t.h"

ControlledOSStatus os;
ControlledLED led;
ControlledTouchLCD disp;
ControlledCalc calc;
BNO055Fusion fusion;
ControlledVMeter vMeter(A10,A11);
ControlledPanTilt panTilt;
ControlledLidar lidar(27);
ControlledI2CXL echo;
ControlledMotor motor(false,2);
ControlledSpek spek(&Serial1,5);

Controller controller;


void setup() {
  pinMode(27,OUTPUT);
  digitalWrite(27,LOW);

  Serial.begin(3000000);
  //Serial1.begin(3000000
  Serial1.begin(115200);

  delay(1000);

  controller.setOutputStream(&Serial);

  Wire1.begin(I2C_MASTER, 0x00, I2C_PINS_29_30, I2C_PULLUP_EXT, I2C_RATE_1200,I2C_OP_MODE_DMA);
 // Wire1.setDefaultTimeout(100);
  fusion.setWire(&Wire1);
  Wire.begin(I2C_MASTER, 0x00, I2C_PINS_18_19, I2C_PULLUP_EXT, I2C_RATE_800,I2C_OP_MODE_DMA);
 // Wire.setDefaultTimeout(100);
  lidar.setWire(&Wire);
  echo.setWire(&Wire);

  disp.tch_cs = 17;
  disp.tft_dc = 20;
  disp.tft_cs = 15;

delay(200);

Serial.println("Starting Controlled Modules");

  controller.loadControlled('Z',&os);
  controller.loadControlled('B',&led);
  controller.loadControlled('C',&calc);
  controller.loadControlled('D',&disp);
  controller.loadControlled('F',&fusion);
  controller.loadControlled('V',&vMeter);
  controller.loadControlled('P',&panTilt);
  controller.loadControlled('L',&lidar);
  controller.loadControlled('E',&echo);
  controller.loadControlled('M',&motor);
    controller.loadControlled('R',&spek);

  Serial.println("Modules have started!!");

 
  
  // Setup display brightness and rotation
  controller.run(2,Controller::newString("B BRT 255"),'D',2);
  controller.run(2,Controller::newString("B ROT 1"),'D',2);

// controller.run(2,Controller::newString("FUN P1 $UL:DST.0,w[$UC:VRP={#U1+$UC:VRP.0}],w[$UP:PAN=$UC:VRP.0]"),'C');

  controller.run(2,Controller::newString("PWM R 21"),'B');
    controller.run(2,Controller::newString("PWM G 22"),'B');
      controller.run(2,Controller::newString("PWM B 23"),'B');
          controller.run(2,Controller::newString("BIN Z 13"),'B');


    controller.run(2,Controller::newString("INT 0 #D-100,#D-5|#D100,#D-5~#D1000,#D0|#D1048,#D0~#D2048,#D5~#D2600,#D5"),'C'); 
     controller.run(2,Controller::newString("INT 1 #D-180,#D-512~#D-5,#D-200~#D-.5,#D-50|#D-.499999,#D0|#D0.49999,#D0|#D.5,#D50~#D5,#D200~#D180,#D512"),'C'); 
 controller.run(28,Controller::newString("FUN C0 w[$DC:VRV={{$DV:VLT+$DC:VRV}/#D2}]"),'C');
    controller.run(28,Controller::newString("FUN C1 w[$DC:VRC={{$DV:CUR+$DC:VRC}/#D2}]"),'C');
   controller.run(27,Controller::newString("FUN F0 w[$DC:VRH={$DC:VRH+i0[$UR:DDD]}],?{$DC:VRH>#D360}[w[$DC:VRH={$DC:VRH-#D360}],#D0],?{$DC:VRH<#D0}[w[$DC:VRH={$DC:VRH+#D360}],#D0]"),'C');
 controller.run(27,Controller::newString("FUN F1 w[$DC:VRT={$FF:HED.0-$DC:VRH}],?[$DC:VRT>#D180]{w[$IM:DDD=i1[{#D180-$DC:VRT}],?[$DC:VRT<#D-180]{w[$IM:DDD=i1[{#D360+$DC:VRT}]],w[$IM:DDD=i1[$DC:VRT]]}"),'C');



  controller.run(2,Controller::newString("3 10 80 T B8 $FF:HED.0 255,255,255 0,0,0"),'D');
    controller.run(2,Controller::newString("4 50 80 T B8 $FF:HED.1 255,255,255 0,0,0"),'D');
      controller.run(2,Controller::newString("5 100 80 T B8 $FF:HED.2 255,255,255 0,0,0"),'D');
//    controller.run(2,Controller::newString("30 10 100 T B8 $FF:GYR.0 255,255,255 0,0,0"),'D');
   controller.run(2,Controller::newString("0 10 60 T 8 $DC:VRV 255,255,255 0,0,0"),'D');
      controller.run(2,Controller::newString("1 60 60 T 8 $DC:VRC 255,255,255 0,0,0"),'D');
            controller.run(2,Controller::newString("2 150 60 T 8 $DC:VRH 255,255,255 0,0,0"),'D');
     controller.run(2,Controller::newString("50 140 80 T 8 $UL:AAA 255,255,255 0,0,0"),'D');
    controller.run(2,Controller::newString("6 180 80 T 8 $UR:AAA 255,255,255 0,0,0"),'D');
   controller.run(2,Controller::newString("7 220 80 T 8 $UR:DDD 255,255,255 0,0,0"),'D');

//         controller.run(2,Controller::newString("12 250 65 T 10 $UC:FNP.1 255,255,255 0,0,0"),'D');
                    controller.run(2,Controller::newString("13 250 45 T 10 $UC:VRP 255,255,255 0,0,0"),'D');
//   controller.run(2,Controller::newString("8 0 218 T 8 $SZ:INP 0,255,0 0,10,160"),'D');
//    controller.run(2,Controller::newString("9 0 230 T 8 $SZ:ETX 255,0,0 10,10,10"),'D');
//    controller.run(2,Controller::newString("10 260 230 T B8 $TZ:ETM 200,0,0 10,10,10"),'D');
//
    controller.run(2,Controller::newString("80 2 2 T B8 \"Motor: ERR THR  DIF  M0B M1B M0Sp M1Sp M0Cur  M1Cur\" 255,255,255 0,0,0"),'D');
    controller.run(2,Controller::newString("81 42 16 T B8 $BM:ERR 255,12,12 0,0,0"),'D');
    controller.run(2,Controller::newString("82 116 16 T 8 $BM:BLL 255,255,255 0,0,0"),'D');
    controller.run(2,Controller::newString("83 140 16 T 8 $BM:BRR 255,255,255 0,0,0"),'D');
    controller.run(2,Controller::newString("84 67 16 T 8 $IM:THR 255,255,255 0,0,0"),'D');
    controller.run(2,Controller::newString("85 92 16 T 8 $IM:DIF 255,255,255 0,0,0"),'D');
    controller.run(2,Controller::newString("86 166 16 T 8 $IM:SLT 255,255,255 0,0,0"),'D');
    controller.run(2,Controller::newString("87 199 16 T 8 $IM:SRT 255,255,255 0,0,0"),'D');
    controller.run(2,Controller::newString("88 232 16 T 8 $UM:CLR 255,255,255 0,0,0"),'D');
    controller.run(2,Controller::newString("89 274 16 T 8 $UM:CRT 255,255,255 0,0,0"),'D');
//
//
// controller.schedule(2,0,10,false,0,Controller::newString("EXE D0"),'C');
  controller.schedule(2,0,10,false,0,Controller::newString("EXE C0"),'C');
//
   controller.schedule(2,0,10,false,0,Controller::newString("EXE C1"),'C');

      controller.run(2,Controller::newString("SET BP:ENA #B1"),'C');

      controller.run(2,Controller::newString("SET BE:ENA #B0"),'C');
       controller.run(2,Controller::newString("SET BL:ENA #B0"),'C');

       
      controller.run(2,Controller::newString("SET UR:AAA #U0"),'C');
      controller.run(4,Controller::newString("SET UR:DDD #U1024"),'C');

    controller.schedule(4,1000,1000,false,0,Controller::newString("SET BB:ZZZ ?{$BB:ZZZ==#B0}[#B1,#B0]"),'C');

 controller.schedule(1,3,3,false,0,Controller::newString("D"),'D');

 

controller.schedule(5,10,10,false,0,Controller::newString("SET IM:TTT {{$UR:AAA/#I6}*$IC:VRI}"),'C');
//controller.schedule(5,10,10,false,0,Controller::newString("SET IM:DDD {{$UR:DDD-#I1024}/#I-3}"),'C');
  controller.schedule(2,0,10,false,0,Controller::newString("EXE F0"),'C');
    controller.schedule(2,0,10,false,0,Controller::newString("EXE F1"),'C');

controller.schedule(5,20,20,false,0,Controller::newString("SET UP:PAN {$UR:BBB/#U2}"),'C');
controller.schedule(5,20,20,false,0,Controller::newString("SET UP:TLT {$UR:CCC/#U2}"),'C');
controller.schedule(5,100,100,false,0,Controller::newString("SET BP:ENA {$UR:EEE>#U400}"),'C');
controller.schedule(5,100,100,false,0,Controller::newString("SET IC:VRI ?{$UR:FFF>#U400}[#I1,#I-1]"),'C');


 controller.transmitTimeOnTick = false;

}

void loop() {
        if (Serial.available()){
          controller.processInput(&Serial);
        }
        controller.execute();
}
